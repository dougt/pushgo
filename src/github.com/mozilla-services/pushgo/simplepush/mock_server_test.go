// Automatically generated by MockGen. DO NOT EDIT!
// Source: src/github.com/mozilla-services/pushgo/simplepush/server.go

package simplepush

import (
	time "time"
	gomock "github.com/rafrombrc/gomock/gomock"
)

// Mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *_MockServerRecorder
}

// Recorder for MockServer (not exported)
type _MockServerRecorder struct {
	mock *MockServer
}

func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &_MockServerRecorder{mock}
	return mock
}

func (_m *MockServer) EXPECT() *_MockServerRecorder {
	return _m.recorder
}

func (_m *MockServer) RequestFlush(w Worker, chid string, vers int64, data string) error {
	ret := _m.ctrl.Call(_m, "RequestFlush", w, chid, vers, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) RequestFlush(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RequestFlush", arg0, arg1, arg2, arg3)
}

func (_m *MockServer) UpdateWorker(w Worker, chid string, vers int64, sentAt time.Time, data string) error {
	ret := _m.ctrl.Call(_m, "UpdateWorker", w, chid, vers, sentAt, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) UpdateWorker(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateWorker", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockServer) HandleCommand(cmd PushCommand, w Worker) (int, JsMap) {
	ret := _m.ctrl.Call(_m, "HandleCommand", cmd, w)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(JsMap)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) HandleCommand(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HandleCommand", arg0, arg1)
}
