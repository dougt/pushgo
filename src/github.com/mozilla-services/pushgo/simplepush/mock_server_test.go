// Automatically generated by MockGen. DO NOT EDIT!
// Source: src/github.com/mozilla-services/pushgo/simplepush/server.go

package simplepush

import (
	time "time"
	gomock "github.com/rafrombrc/gomock/gomock"
)

// Mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *_MockServerRecorder
}

// Recorder for MockServer (not exported)
type _MockServerRecorder struct {
	mock *MockServer
}

func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &_MockServerRecorder{mock}
	return mock
}

func (_m *MockServer) EXPECT() *_MockServerRecorder {
	return _m.recorder
}

func (_m *MockServer) RequestFlush(client *Client, channel string, version int64, data string) error {
	ret := _m.ctrl.Call(_m, "RequestFlush", client, channel, version, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) RequestFlush(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RequestFlush", arg0, arg1, arg2, arg3)
}

func (_m *MockServer) UpdateClient(client *Client, chid string, uid string, vers int64, time time.Time, data string) error {
	ret := _m.ctrl.Call(_m, "UpdateClient", client, chid, uid, vers, time, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) UpdateClient(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateClient", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockServer) HandleCommand(cmd PushCommand, sock *PushWS) (int, JsMap) {
	ret := _m.ctrl.Call(_m, "HandleCommand", cmd, sock)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(JsMap)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) HandleCommand(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HandleCommand", arg0, arg1)
}

func (_m *MockServer) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
