// Automatically generated by MockGen. DO NOT EDIT!
// Source: src/github.com/mozilla-services/pushgo/simplepush/log.go

package simplepush

import (
	gomock "github.com/rafrombrc/gomock/gomock"
)

// Mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *_MockLoggerRecorder
}

// Recorder for MockLogger (not exported)
type _MockLoggerRecorder struct {
	mock *MockLogger
}

func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &_MockLoggerRecorder{mock}
	return mock
}

func (_m *MockLogger) EXPECT() *_MockLoggerRecorder {
	return _m.recorder
}

func (_m *MockLogger) ConfigStruct() interface{} {
	ret := _m.ctrl.Call(_m, "ConfigStruct")
	ret0, _ := ret[0].(interface{})
	return ret0
}

func (_mr *_MockLoggerRecorder) ConfigStruct() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConfigStruct")
}

func (_m *MockLogger) Init(app *Application, config interface{}) error {
	ret := _m.ctrl.Call(_m, "Init", app, config)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLoggerRecorder) Init(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Init", arg0, arg1)
}

func (_m *MockLogger) Log(level LogLevel, messageType string, payload string, fields LogFields) error {
	ret := _m.ctrl.Call(_m, "Log", level, messageType, payload, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLoggerRecorder) Log(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Log", arg0, arg1, arg2, arg3)
}

func (_m *MockLogger) SetFilter(level LogLevel) {
	_m.ctrl.Call(_m, "SetFilter", level)
}

func (_mr *_MockLoggerRecorder) SetFilter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFilter", arg0)
}

func (_m *MockLogger) ShouldLog(level LogLevel) bool {
	ret := _m.ctrl.Call(_m, "ShouldLog", level)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockLoggerRecorder) ShouldLog(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShouldLog", arg0)
}

func (_m *MockLogger) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLoggerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
