// Automatically generated by MockGen. DO NOT EDIT!
// Source: src/github.com/mozilla-services/pushgo/simplepush/handlers.go

package simplepush

import (
	gomock "github.com/rafrombrc/gomock/gomock"
	net "net"
	mux "github.com/gorilla/mux"
)

// Mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *_MockHandlerRecorder
}

// Recorder for MockHandler (not exported)
type _MockHandlerRecorder struct {
	mock *MockHandler
}

func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &_MockHandlerRecorder{mock}
	return mock
}

func (_m *MockHandler) EXPECT() *_MockHandlerRecorder {
	return _m.recorder
}

func (_m *MockHandler) Listener() net.Listener {
	ret := _m.ctrl.Call(_m, "Listener")
	ret0, _ := ret[0].(net.Listener)
	return ret0
}

func (_mr *_MockHandlerRecorder) Listener() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Listener")
}

func (_m *MockHandler) MaxConns() int {
	ret := _m.ctrl.Call(_m, "MaxConns")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockHandlerRecorder) MaxConns() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxConns")
}

func (_m *MockHandler) URL() string {
	ret := _m.ctrl.Call(_m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockHandlerRecorder) URL() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "URL")
}

func (_m *MockHandler) ServeMux() *mux.Router {
	ret := _m.ctrl.Call(_m, "ServeMux")
	ret0, _ := ret[0].(*mux.Router)
	return ret0
}

func (_mr *_MockHandlerRecorder) ServeMux() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServeMux")
}

func (_m *MockHandler) Start(_param0 chan<- error) {
	_m.ctrl.Call(_m, "Start", _param0)
}

func (_mr *_MockHandlerRecorder) Start(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start", arg0)
}

func (_m *MockHandler) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockHandlerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
