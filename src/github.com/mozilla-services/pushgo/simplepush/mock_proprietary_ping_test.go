// Automatically generated by MockGen. DO NOT EDIT!
// Source: src/github.com/mozilla-services/pushgo/simplepush/proprietary_ping.go

package simplepush

import (
	gomock "github.com/rafrombrc/gomock/gomock"
)

// Mock of PropPinger interface
type MockPropPinger struct {
	ctrl     *gomock.Controller
	recorder *_MockPropPingerRecorder
}

// Recorder for MockPropPinger (not exported)
type _MockPropPingerRecorder struct {
	mock *MockPropPinger
}

func NewMockPropPinger(ctrl *gomock.Controller) *MockPropPinger {
	mock := &MockPropPinger{ctrl: ctrl}
	mock.recorder = &_MockPropPingerRecorder{mock}
	return mock
}

func (_m *MockPropPinger) EXPECT() *_MockPropPingerRecorder {
	return _m.recorder
}

func (_m *MockPropPinger) Register(uaid string, pingData []byte) error {
	ret := _m.ctrl.Call(_m, "Register", uaid, pingData)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPropPingerRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Register", arg0, arg1)
}

func (_m *MockPropPinger) Send(uaid string, vers int64, data string) (bool, error) {
	ret := _m.ctrl.Call(_m, "Send", uaid, vers, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPropPingerRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Send", arg0, arg1, arg2)
}

func (_m *MockPropPinger) CanBypassWebsocket() bool {
	ret := _m.ctrl.Call(_m, "CanBypassWebsocket")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPropPingerRecorder) CanBypassWebsocket() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CanBypassWebsocket")
}

func (_m *MockPropPinger) Status() (bool, error) {
	ret := _m.ctrl.Call(_m, "Status")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPropPingerRecorder) Status() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Status")
}

func (_m *MockPropPinger) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPropPingerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
