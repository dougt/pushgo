# General config options to define the server.
# Please copy to config.ini

# host addr and socket to listen to. 0.0.0.0 = all interfaces
host = 0.0.0.0
port = 8080

# Max number of sockets to allow on a given server
# Additional sockets above this will be denied, and status will return
# not OK.
#max_connections = 1000

# Path to SSL certification files
#ssl.certfile=certs/test.crt
#ssl.keyfile=certs/test.key

# If required, you can specify a different context for the WebSocket
# connections. These will use the non "ws*" prefixed values if not
# specified
#wshost = 0.0.0.0
#wsport = 8080
# If you don't specify these, or set them to empty values, no SSL is 
# used.
#ssl.ws.certfile=certs/test.crt
#ssl.ws.keyfile=certs/test.key

# This defines what endpoint to use for updates.
# elements in <> will be replaced.
# <current_host> = the current host to connect to.
#        (note, in most cases, this should be the general cname for
#         the service, e.g. "push.services.mozilla.org") Only use
#         <current_host> for debugging or development since this will
#         route endpoints to a specific box.
# <token> = the LSoC (long string of crap) that uniquely identifies a
#         UserAgentID (uaid) and ChannelID (chid).
push.endpoint = http://<current_host>/update/<token>

# enable logging
# NOTE logging is currently very CPU intensive and should only be used for
# debugging
logger.enable = 0
# maximum level of logging (0=Critical...5=Info)
#logger.filter=10
# comment out to enable heka logging
heka.use = 0
#heka.sender = tcp
#heka.server_addr = 127.0.0.1
#heka.logger_name = simplepush
# define if different than the result of os.Hostname()
#heka.current_host = localhost

# Memcache data servers
#  multiple memcache servers can be appended with commas (e.g.
#  10.0.0.1:11211, 10.0.0.2:11211, ... )
#memcache.server = 127.0.0.1:11211
# Use the AWS Elasticache node discovery discovery system. This will use
# the values specified in memcache.server as "backup" in case the call
# fails.
#elasticache.config_endpoint=
#
# Number of connections to pool per server
#  a connection is a socket to a remote memcache server. Obviously, this
#  decreases the number of sockets available
#memcache.pool_size = 100
# Maximum size that the connection pool should grow to.
#memcache.max_pool = 500
# Memcache timeouts
#memcache.recv_timeout=5s
#memcache.send_timeout=5s
#memcache.poll_timeout=5s
#memcache.retry_timeout=5s
# "live" records timeout in 3 days
#db.timeout_live = 259200
# "registrations" timeout in 3 hours
#db.timeout_reg = 10800
# "deleted" records time out in 1 day
#db.timeout_del = 86400
# Maximum number of client channels before we send a re-registration request
#db.max_channels = 200

# Minimum time between pings (0 == no minimum ping interval)
# Clients that ping more frequently than this will have their socket closed
# and may be considered "hostile".
client.min_ping_interval = 20s
## Timeout socket if not recv'd hello
#client.hello_timeout = 30s

# define this to encode the Primary Key / ChannelID combo
# this is a valid 16, 24, or 32 []byte created by crypto/rand.Read()
# This key can be generated by running go run util/genKey/main.go
# e.g.
#token_key = W8FfY9Tw9PtMSEFJF0MAkw==

# Allow cross machine update proxying.
#shard.do_proxy = 0
# FQDN of the current hostname. (Note, AWS returns an invalid value
# for hostname)
# If this is not defined, app will also query environment $HOST value.
#shard.current_host = localhost
# Default host to shard users to
#shard.default_host = localhost
#
# If you're running on Amazon, try pulling the public hostname from the
# metadata service
#shard.use_aws_host = 1
# use the TCP router (beta)
#shard.router=1
#shard.port=3000
