# General config options to define the server.
# Please copy to config.ini

[default]
# host addr and socket to listen to. 0.0.0.0 = all interfaces
host = "0.0.0.0"
port = 8080

# Max number of sockets to allow on a given server
# Additional sockets above this will be denied, and status will return
# not OK.
#max_connections = 1000

# FQDN of the current hostname. (Note, AWS returns an invalid value
# for hostname)
# If this is not defined, app will also query environment $HOST value.
#current_host = "localhost"
# If you're running on Amazon, try pulling the public hostname from the
# metadata service
#use_aws_host = false

# Path to SSL certification files
#ssl_cert_file = "certs/test.crt"
#ssl_key_file = "certs/test.key"

# This defines what endpoint to use for updates.
# elements in <> will be replaced.
# <current_host> = the current host to connect to.
#        (note, in most cases, this should be the general cname for
#         the service, e.g. "push.services.mozilla.org") Only use
#         <current_host> for debugging or development since this will
#         route endpoints to a specific box.
# <token> = the LSoC (long string of crap) that uniquely identifies a
#         UserAgentID (uaid) and ChannelID (chid).
push_endpoint = "<current_host>/update/<token>"
# reply to pings with "{}" if push_long_pongs is false
#push_long_pongs = false

# define this to encode the Primary Key / ChannelID combo
# this is a valid 16, 24, or 32 []byte created by crypto/rand.Read()
# This key can be generated by running go run util/genKey/main.go
# e.g.
#token_key = "W8FfY9Tw9PtMSEFJF0MAkw=="

# Minimum time between pings (0 == no minimum ping interval)
# Clients that ping more frequently than this will have their socket closed
# and may be considered "hostile".
client_min_ping_interval = "20s"
## Timeout socket if not recv'd hello
#client_hello_timeout = "30s"

[propping]
# Proprietary pings
#
# GCM config used for android proprietary pings (EXPERIMENTAL)
#type = gcm
#ttl = 259200
#collapse_key = "simplepush"
#project_id = "simplepush-gcm"
#dry_run = false
#api_key = "YOUR_API_KEY"
#url = "https://android.googleapis.com/gcm/send"
#
#type = udp
#url = vendor provided URL here
#
# Do nothing (default)
#type = "noop"

[logging]
type = "stdout"
# NOTE logging is currently very CPU intensive and should only be used for
# debugging
# maximum level of logging (0=Critical...5=Info)
#filter = 0
# Should the caller be shown?
#trace = false

# comment out to enable heka logging
#[heka]
#sender = "tcp"
#server_addr = "127.0.0.1"
#logger_name = "simplepush"


[storage]
type = "none"
#  Use the AWS Elasticache node discovery discovery system. This will use
#  the values specified in memcache.server as "backup" in case the call
#  fails.
#elasticache_config_endpoint =

#[storage.memcache]
#  Memcache data servers
#  multiple memcache servers can be appended with commas (e.g.
#  ["10.0.0.1:11211", "10.0.0.2:11211", ... ]  )
#server = ["127.0.0.1:11211"]
# Number of connections to pool per server
#  a connection is a socket to a remote memcache server. Obviously, this
#  decreases the number of sockets available
#pool_size = 100

# Memcache timeouts
# WARNING: Memcache is VERY SENSITIVE about these timeouts, improperly high
# settings will cause INVALID ARGUMENTS errors
#recv_timeout = "5s"
#send_timeout = "5s"
#poll_timeout = "15ms"
#retry_timeout = "5s"

[storage.db]
# "live" records timeout in 3 days
#timeout_live = 259200
# "registrations" timeout in 3 hours
#timeout_reg = 10800
# "deleted" records time out in 1 day
#timeout_del = 86400
#handle_timeout = 5s
# Maximum number of client channels before we send a re-registration request
#max_channels = 200
#prop_prefix = "_pc-"

[memcache]
# Memcache storage configuration information
#
# AWS Elasticache Configuration Endpoint
#elasticache_config_endpoint = "host.address"
# list of memcached host nodes (if not using above)
#server = "host.address"
# Max number of open connections managed by the pool
#max_pool = 400
# Socket Receive Timeout
#recv_timeout = "5s"
# Socket Send Timeout
#send_timeout = "5s"
# Memcached polling timeout
#poll_timeout = "5s"
# Memcached unhealthy retry timeout
#retry_timeout = "5s"


[router]
# Default host to shard users to, defaults to global hostname above
#default_host = "localhost"
# Default port for shard routing
# (NOTE: this should not be publicly accessible)
#port = 3000
# default scheme for routing http pushes
#scheme = "http"
# URL Template for sending routing messages
#url_template = {{.Scheme}}://{{.Host}}/route/{{.Uaid}}
# Fail a route connection attempt after timeout seconds
#ctimeout = "3s"
# Fail a route processing attempt after timeout seconds
#rwtimeout = "3s"
# Servers should be considered "valid" for this period
#defaultTTL = "24h"
# how big a "bucket" of servers to try in one go.
# Note: buckets should be between 10 and 50 servers
# (31MM hosts divided by 200K means ~155 servers, so bucket_size of 10
# means 16 buckets. Have fun with probability tables to figure out the
# size that works best for you.)
#bucket_size = 10

# use the TCP router (beta)
#router=1
#port=3000

[router.discovery]
type = "etcd"
# list of etcd servers
#etcd_servers = ["http://localhost:4001"]


[metrics]
#prefix = "myhostname.simplepush"
#statsd_name = "undef"
#statsd_server = "heka_statsdinput_host:1234"
